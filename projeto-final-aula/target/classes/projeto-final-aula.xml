<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:rmi="http://www.mulesoft.org/schema/mule/rmi" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/rmi http://www.mulesoft.org/schema/mule/rmi/current/mule-rmi.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<global-property name="visa.tcp.port" value="5010" doc:name="Global Property"/>
    <tcp:connector name="TCP" validateConnections="true" sendBufferSize="1024" receiveBufferSize="1024" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="TCP">
       <tcp:xml-eof-protocol/>
    </tcp:connector>
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <ws:consumer-config name="Web_Service_Consumer" wsdlLocation="http://localhost:8080/StarkSystem/StarkSystemService?wsdl" service="StarkSystemService" port="StarkSystemServicePort" serviceAddress="http://localhost:8080/StarkSystem/StarkSystemService" doc:name="Web Service Consumer"/>
    <http:request-config name="HTTP_BrRobotics" host="127.0.0.1" port="8080" doc:name="HTTP Request Configuration"/>
    <rmi:connector name="RMI" securityPolicy="${app.home}/java_policy" validateConnections="true" jndiInitialFactory="com.sun.jndi.rmi.registry.RegistryContextFactory" jndiProviderUrl="rmi://127.0.0.1:11099" doc:name="RMI"/>
    <http:request-config name="HTTP_freteService" host="localhost" port="55555" doc:name="HTTP Request Configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8903" doc:name="HTTP Request Configuration"/>
    <flow name="frontend">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/*" doc:name="HTTP"/>
        <http:static-resource-handler resourceBase="${app.home}/docroot" doc:name="HTTP Static Resource Handler"/>
    </flow>
    <flow name="fluxoPrincipal">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/tratarForm" doc:name="HTTP"/>
        <component class="br.ufsc.das.Tratamento" doc:name="Tratamento"/>
        <enricher doc:name="Message Enricher">
            <scatter-gather doc:name="Scatter-Gather">
                <processor-chain>
                    <component class="br.ufsc.das.TratarPedidoReator" doc:name="Tratar Pedido Reator"/>
                    <enricher doc:name="Message Enricher">
                        <processor-chain doc:name="Processor Chain">
                            <dw:transform-message doc:name="Transform Message">
                                <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://ws.starksystem.com/
---
{
	ns0#inserirPedido: {
		pedido: {
			cliente: payload.cliente,
			endereco: payload.endereco,
			estado: payload.estado,
			qtdReatorArk: payload.qtdReatorArk,
			qtdReatorSolar: payload.qtdReatorSolar
		}
	}
}]]></dw:set-payload>
                            </dw:transform-message>
                            <ws:consumer config-ref="Web_Service_Consumer" operation="inserirPedido" doc:name="Web Service Consumer"/>
                        </processor-chain>
                        <enrich source="#[xpath('//total')]" target="#[payload.total]"/>
                        <enrich source="#[xpath('//codigo')]" target="#[payload.codigo]"/>
                    </enricher>
                </processor-chain>
                <processor-chain>
                    <component class="br.ufsc.das.TratarPedidoRobo" doc:name="Tratar Pedido Robo"/>
                    <enricher doc:name="Message Enricher">
                        <processor-chain doc:name="Processor Chain">
                            <dw:transform-message doc:name="Transform Message">
                                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"cliente": payload.cliente,
	"endereco": payload.endereco,
	"estado": payload.estado,
	"qtdRoboDomestico": payload.qtdRoboDomestico,
	"qtdRoboMedico": payload.qtdRoboMedico,
	"qtdRoboSeguranca": payload.qtdRoboSeguranca
}]]></dw:set-payload>
                            </dw:transform-message>
                            <http:request config-ref="HTTP_BrRobotics" path="/BrRobotics/rest/BrRoboticsService/inserirPedido" method="POST" doc:name="HTTP"/>
                        </processor-chain>
                        <enrich source="#[json:total]" target="#[payload.total]"/>
                        <enrich source="#[json:codigo]" target="#[payload.codigo]"/>
                    </enricher>
                </processor-chain>
            </scatter-gather>
            <enrich source="#[payload]" target="#[payload.pecas]"/>
        </enricher>
        <component class="br.ufsc.das.CalcularTotalGeralDoPedido" doc:name="Calcular Total do Pedido"/>
        <set-variable variableName="payloadVar" value="#[payload]" doc:name="Salvar Payload" encoding="UTF-8"/>
        <set-payload value="#[payload.valorTotal]" doc:name="Setar valorTotal no Payload" encoding="UTF-8"/>
        <rmi:outbound-endpoint exchange-pattern="request-response" method="calcularValorComComissao" methodArgumentTypes="float" connector-ref="RMI" address="rmi://127.0.0.1/CalculoComissaoService" responseTimeout="10000" doc:name="Calcular Valor com Comissao RMI"/>
        <set-variable variableName="valorTotal" value="#[payload]" doc:name="Salvar valorTotal" encoding="UTF-8"/>
        <set-payload value="#[flowVars.payloadVar.estado]" doc:name="Setar estado no Payload" encoding="UTF-8"/>
        <enricher doc:name="Message Enricher">
            <http:request config-ref="HTTP_freteService" path="/api/Frete/{UF}" method="GET" doc:name="Calcular Frete">
                <http:request-builder>
                    <http:uri-param paramName="UF" value="#[payload]"/>
                </http:request-builder>
            </http:request>
            <enrich source="#[json:valorFrete]" target="#[payload]"/>
        </enricher>
        <component class="br.ufsc.das.ParseFloat" doc:name="ParseFloat">
            <method-entry-point-resolver> 
                <include-entry-point method="parse"/> 
            </method-entry-point-resolver>
        </component>
        <enricher doc:name="Message Enricher">
            <set-variable variableName="valorFrete" value="#[payload]" doc:name="Variable"/>
            <enrich source="#[payload]" target="#[flowVars.payloadVar.valorFrete]"/>
        </enricher>
        <enricher doc:name="Message Enricher">
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	valorTotal: payload + flowVars.valorTotal
}]]></dw:set-payload>
                <dw:set-variable variableName="valorTotal"><![CDATA[%dw 1.0
%output application/java
---
{
}]]></dw:set-variable>
            </dw:transform-message>
            <enrich source="#[payload.valorTotal]" target="#[payload]"/>
        </enricher>
        <enricher doc:name="Message Enricher">
            <set-variable variableName="valorTotal" value="#[payload]" encoding="UTF-8" doc:name="Salvar valorTotal"/>
            <enrich source="#[payload]" target="#[flowVars.payloadVar.cartao.TransactionValue]"/>
        </enricher>
        <flow-ref name="tratamentoCartaoCredito" doc:name="Processamento Cartao de Credito"/>
        <set-variable variableName="transactionData" value="#[payload]" doc:name="Salvar Dados Transacao"/>

        <set-payload value="#[flowVars.payloadVar]" doc:name="Setar Payload Anterior" encoding="UTF-8"/>
        <enricher doc:name="Message Enricher">
            <set-variable variableName="payloadVar" value="#[payload]" doc:name="Salvar Payload" encoding="UTF-8"/>
            <enrich source="#[flowVars.valorTotal]" target="#[payload.valorTotal]"/>
        </enricher>
        <component class="br.ufsc.das.MontaXmlNotaFiscal" doc:name="Java"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/gerarNotaFiscal" method="POST" sendBodyMode="ALWAYS" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Content-Type" value="text/xml"/>
            </http:request-builder>
        </http:request>
        <json:xml-to-json-transformer doc:name="XML to JSON"/>
        <enricher doc:name="Message Enricher">
            <set-variable variableName="do" value="nothing" doc:name="Variable"/>
            <enrich source="#[json:emissaoNotaFiscal]" target="#[payload]"/>
        </enricher>
        <enricher doc:name="Message Enricher">
            <set-variable variableName="do" value="nothing" doc:name="Variable"/>
            <enrich source="#[json:numeroNotaFiscal]" target="#[flowVars.payloadVar.cdNotaFiscal]"/>
            <enrich source="#[json:urlNotaFiscal]" target="#[flowVars.payloadVar.linkNotaFiscal]"/>
        </enricher>
        <set-payload value="#[flowVars.payloadVar]" encoding="UTF-8" doc:name="Setar Payload Anterior"/>
        <component class="br.ufsc.das.TratarResultadoPedido" doc:name="Tratar Resultado Pedido"/>

        <object-to-string-transformer mimeType="text/plain" doc:name="Object to String" encoding="UTF-8"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-payload value="Ocorreu um erro processando requis&#227;o -&gt; #[exception.cause]" encoding="UTF-8" mimeType="text/plain" doc:name="Setar Mensagem de Erro"/>
        </catch-exception-strategy>
    </flow>
    <flow name="tratamentoCartaoCredito">
        <set-payload value="#[flowVars.payloadVar.cartao]" doc:name="Setar cartao no Payload"/>
        <choice doc:name="Decidi Cart&#227;o de Cr&#233;dito">
            <when expression="#[payload.CardNumber.substring(0, 1) == '4' &amp;&amp; payload.CardNumber.length() == 16]">
                <flow-ref name="visaFlow" doc:name="Visa Flow"/>
            </when>
            <when expression="#[Integer.parseInt(payload.CardNumber.substring(0,2)) &gt;= 51 &amp;&amp; Integer.parseInt(payload.CardNumber.substring(0,2)) &lt;= 55 &amp;&amp; payload.CardNumber.length() == 16]">
                <flow-ref name="mastercardFlow" doc:name="Mastercard Flow"/>
            </when>
            <otherwise>
                <component class="br.ufsc.das.Exceptions.LancarExcecaoCartaoNaoReconhecido" doc:name="Cart&#227;o N&#227;o Reconhecido"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="mastercardFlow">
        <component class="br.ufsc.das.MastercardTCPClient" doc:name="Mastercard TCP Client"/>
        <object-to-string-transformer encoding="UTF-8" mimeType="text/plain" doc:name="Object to String"/>
    </flow>
    <flow name="visaFlow">
        <set-payload value="PAY#[System.getProperty('line.separator')] " mimeType="text/plain" doc:name="Comando PAY"/>
        <tcp:outbound-endpoint exchange-pattern="request-response" host="localhost" port="${visa.tcp.port}" connector-ref="TCP" responseTimeout="10000" doc:name="TCP"/>
        <byte-array-to-string-transformer mimeType="text/plain" doc:name="Byte Array to String"/>
        <choice doc:name="Choice">
            <when expression="#[payload == &quot;OK&quot;]">
                <set-payload value="#[flowVars.payloadVar.cartao.CardNumber]#[System.getProperty('line.separator')]" doc:name="Numero Cartao de Credito"/>
                <tcp:outbound-endpoint exchange-pattern="request-response" host="localhost" port="${visa.tcp.port}" connector-ref="TCP" responseTimeout="10000" doc:name="TCP"/>
                <byte-array-to-string-transformer mimeType="text/plain" doc:name="Byte Array to String"/>
                <choice doc:name="Choice">
                    <when expression="#[payload == &quot;OK&quot;]">
                        <set-payload value="#[flowVars.payloadVar.cartao.CardName]#[System.getProperty('line.separator')]" doc:name="Nome Cartao de Credito"/>
                        <tcp:outbound-endpoint exchange-pattern="request-response" host="localhost" port="${visa.tcp.port}" connector-ref="TCP" responseTimeout="10000" doc:name="TCP"/>
                        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                        <choice doc:name="Choice">
                            <when expression="#[payload == &quot;OK&quot;]">
                                <set-payload value="#[flowVars.payloadVar.cartao.ExpirationDate]#[System.getProperty('line.separator')]" doc:name="Data de Expira&#231;&#227;o do Cart&#227;o"/>
                                <tcp:outbound-endpoint exchange-pattern="request-response" host="localhost" port="${visa.tcp.port}" connector-ref="TCP" responseTimeout="10000" doc:name="TCP"/>
                                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                                <choice doc:name="Choice">
                                    <when expression="#[payload == &quot;OK&quot;]">
                                        <set-payload value="#[flowVars.payloadVar.cartao.TransactionValue]#[System.getProperty('line.separator')]" doc:name="Valor da Transa&#231;&#227;o"/>
                                        <tcp:outbound-endpoint exchange-pattern="request-response" host="localhost" port="${visa.tcp.port}" connector-ref="TCP" responseTimeout="10000" doc:name="TCP"/>
                                        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                                        <choice doc:name="Choice">
                                            <when expression="#[payload == &quot;OK&quot;]">
                                                <set-payload value="COMMIT#[System.getProperty('line.separator')] " doc:name="Comando COMMIT"/>
                                                <tcp:outbound-endpoint exchange-pattern="request-response" host="localhost" port="${visa.tcp.port}" connector-ref="TCP" responseTimeout="10000" encoding="UTF-8" mimeType="text/plain" doc:name="TCP"/>
                                                <byte-array-to-string-transformer encoding="UTF-8" mimeType="text/plain" doc:name="Byte Array to String"/>
                                                <logger message="#[payload]" level="INFO" doc:name="Logger"/>
                                                <scripting:component doc:name="Extrai C&#243;digo da Transa&#231;&#227;o">
                                                    <scripting:script engine="Groovy"><![CDATA[String[] str = payload.split(System.getProperty('line.separator'))

return str[1]]]></scripting:script>
                                                </scripting:component>
                                            </when>
                                            <otherwise>
                                                <component class="br.ufsc.das.Exceptions.VisaExceptions" doc:name="Exception"/>
                                            </otherwise>
                                        </choice>
                                    </when>
                                    <otherwise>
                                        <component class="br.ufsc.das.Exceptions.VisaExceptions" doc:name="Exception"/>
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <component class="br.ufsc.das.Exceptions.VisaExceptions" doc:name="Exception"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <component class="br.ufsc.das.Exceptions.VisaExceptions" doc:name="Exception"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <component class="br.ufsc.das.Exceptions.VisaExceptions" doc:name="Exception"/>
            </otherwise>
        </choice>
    </flow>
</mule>
